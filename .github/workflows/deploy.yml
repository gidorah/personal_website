name: Deploy to Hetzner VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and Push Django Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./compose/production/django/Dockerfile
          push: true
          platforms: linux/arm64,linux/amd64
          tags: ghcr.io/${{ github.repository_owner }}/personal_website_django:latest

      - name: Build and Push Postgres Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./compose/production/postgres/Dockerfile
          push: true
          platforms: linux/arm64,linux/amd64
          tags: ghcr.io/${{ github.repository_owner }}/personal_website_postgres:latest

      - name: Build and Push Nginx Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./compose/production/nginx/Dockerfile
          push: true
          platforms: linux/arm64,linux/amd64
          tags: ghcr.io/${{ github.repository_owner }}/personal_website_nginx:latest

      - name: Build and Push Traefik Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./compose/production/traefik/Dockerfile
          push: true
          platforms: linux/arm64,linux/amd64
          tags: ghcr.io/${{ github.repository_owner }}/personal_website_traefik:latest

      - name: Deploy to Hetzner via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

            # Pull the Django image (which contains docker-compose.yml)
            docker pull ghcr.io/${{ github.repository_owner }}/personal_website_django:latest

            # Create a temporary container to copy the compose file
            docker create --name temp_container ghcr.io/${{ github.repository_owner }}/personal_website_django:latest
            docker cp temp_container:/app/docker-compose.production.yml .
            docker rm temp_container

            # Set environment variables and run docker compose
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            export POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            export POSTGRES_PORT=${{ secrets.POSTGRES_PORT || '5432' }}  # Use secret or default
            export DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            export DJANGO_ADMIN_URL=${{ secrets.DJANGO_ADMIN_URL }}
            export DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}
            export SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            export REDIS_URL=${{ secrets.REDIS_URL }}
            export CELERY_FLOWER_USER=${{ secrets.CELERY_FLOWER_USER }}
            export CELERY_FLOWER_PASSWORD=${{ secrets.CELERY_FLOWER_PASSWORD }}

            # Stop and remove the previous containers
            docker compose -f docker-compose.production.yml down

            # Now we can use docker compose
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml up -d --build
